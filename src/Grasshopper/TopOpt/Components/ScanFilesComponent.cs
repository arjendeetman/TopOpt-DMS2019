// This file is part of TopOpt-DMS2019. TopOpt-DMS2019 is licensed 
// under the terms of GNU General Public License as published by the 
// Free Software Foundation. For more information and the LICENSE file, 
// see <https://github.com/arjendeetman/TopOpt-DMS2019>.

using System;
using System.Collections.Generic;
using Grasshopper.Kernel;
using System.IO;

namespace TopOptDMS2019.Components
{
    /// <summary>
    /// Scans for files that are generated by other components. 
    /// </summary>
    public class ScanFiles : GH_Component
    {
        /// <summary>
        /// Initializes a new instance of the component.
        /// </summary>
        public ScanFiles()
          : base("This components finds all the Topology Optimization files.",
              "SCAN",
              "This component finds all the Topology Optimization files.",
              "DMS2019",
              "Utility")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("Path", "P", "Path for reading the files.", GH_ParamAccess.item, "DEFAULT");
            pManager.AddBooleanParameter("Scan", "S", "Toggle to scan for files.", GH_ParamAccess.item, false);
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("Saved files", "SF", "List with files that is currently saved.", GH_ParamAccess.list);
        }

        // Fields
        private List<string> _savedFiles = new List<string>();

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object is used to retrieve from inputs and store in outputs.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // Declaring the variables
            string path;
            string pathInput = String.Empty;
            string GhCompFolder;
            string folderPath;
            string str;
            bool scan = new bool();

            // Access the input parameters
            if (!DA.GetData(0, ref pathInput)) return;
            if (!DA.GetData(1, ref scan)) return;

            // Get path
            if (pathInput == "DEFAULT")
            {
                GhCompFolder = Grasshopper.Folders.DefaultAssemblyFolder;
                path = Path.Combine(GhCompFolder, "DMS2019");
            }
            else
            {
                path = pathInput;
            }
                        
            // Re-scan
            if (scan == true)
            {
                // Clear list
                _savedFiles.Clear();

                // Folder with input data
                // Get all the .csv files
                folderPath = Path.Combine(path, "INPUT");
                DirectoryInfo dir = new DirectoryInfo(folderPath);
                FileInfo[] files = dir.GetFiles("*.csv");
                // Add the file paths to the list
                foreach (FileInfo file in files)
                {
                    str = file.Name;
                    _savedFiles.Add(Path.Combine(path, "INPUT", str));
                }

                // Folder with input data
                // Get all the .csv files
                folderPath = Path.Combine(path, "DEN");
                dir = new DirectoryInfo(folderPath);
                files = dir.GetFiles("*.csv");
                // Add the file paths to the list
                foreach (FileInfo file in files)
                {
                    str = file.Name;
                    _savedFiles.Add(Path.Combine(path, "DEN", str));
                }

                // Folder with log files
                // Get all the .csv files
                folderPath = Path.Combine(path, "LOG");
                dir = new DirectoryInfo(folderPath);
                files = dir.GetFiles("*.log");
                // Add the file paths to the list
                foreach (FileInfo file in files)
                {
                    str = file.Name;
                    _savedFiles.Add(Path.Combine(path, "LOG", str));
                }
            }

            // Assign the output parameters
            DA.SetDataList(0, _savedFiles);
        }

        /// <summary>
        /// Provides an Icon for the component.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get { return Properties.Resources.search; }
        }

        /// <summary>
        /// Gets the unique ID for this component. Do not change this ID after release.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("2d20cd6f-8909-43da-bc84-cb9d253d90a1"); }
        }
    }
}